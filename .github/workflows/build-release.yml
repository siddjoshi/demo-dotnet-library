name: Build, Package and Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.gitignore'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Generate version number based on date and commit hash
    - name: Generate Version Number
      id: version
      run: |
        DATE_VERSION=$(date +'%Y.%m.%d')
        SHORT_SHA=$(git rev-parse --short HEAD)
        COUNTER=$(git rev-list --count HEAD)
        VERSION="${DATE_VERSION}.${COUNTER}"
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "BUILD_VERSION=${VERSION}+${SHORT_SHA}" >> $GITHUB_OUTPUT

    # Update project version - Fixed version
    - name: Update Project Version
      shell: bash
      run: |
        for f in $(find . -name "*.csproj"); do
          echo "Updating version in $f"
          sed -i "s|<Version>.*</Version>|<Version>${{ steps.version.outputs.BUILD_VERSION }}</Version>|" "$f"
        done

    - name: Setup NuGet
      run: |
        dotnet nuget add source --username ${{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration Release --no-restore
    
    - name: Test
      run: dotnet test --no-restore --verbosity normal
    
    - name: Pack
      run: dotnet pack --configuration Release --no-build --output nupkgs
    
    - name: Push to GitHub Packages
      run: dotnet nuget push "./nupkgs/*.nupkg" --source "github" --skip-duplicate --api-key ${{ secrets.GITHUB_TOKEN }}

    # Generate changelog since last release
    - name: Generate Changelog
      id: changelog
      run: |
        LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name || echo "")
        if [ -z "$LATEST_RELEASE" ] || [ "$LATEST_RELEASE" = "null" ]; then
          # If no previous release exists, get all commits
          CHANGELOG=$(git log --pretty=format:"* %s (%h)" --reverse)
        else
          # Get commits since last release
          CHANGELOG=$(git log --pretty=format:"* %s (%h)" --reverse $LATEST_RELEASE..HEAD)
        fi
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    # Create GitHub Release
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: Release v${{ steps.version.outputs.VERSION }}
        body: |
          ## Automatic Release v${{ steps.version.outputs.VERSION }}
          
          Build Version: ${{ steps.version.outputs.BUILD_VERSION }}
          
          ## What's Changed
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          To install this package, add this to your `nuget.config`:
          ```xml
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
              <packageSources>
                  <add key="github" value="https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" />
              </packageSources>
          </configuration>
          ```
          
          Then install using:
          ```bash
          dotnet add package ${{ github.event.repository.name }} --version ${{ steps.version.outputs.BUILD_VERSION }}
          ```
        files: ./nupkgs/*.nupkg
        draft: false
        prerelease: false
        generate_release_notes: true